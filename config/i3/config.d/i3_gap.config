# ~/.config/i3/config.d/i3_gap.config
# vim: syntax=i3
# ======================================================================================
# All About i3-gap Gap Setting
# ======================================================================================
# If you are using original i3, comment out the line "include ./config.d/i3_gap.config"
# in ~/.config/i3/config

# Set default gaps size
gaps inner $default_inner_gap
gaps outer $default_outer_gap

# Gaps options
# -- on: ONLY enable outer and inner gaps when there are more than one container
# -- inverse_outer: ONLY enable outer gaps when there is exactly one container
#smart_gaps on

# i3-gap (shortcut for current workspace)
bindsym Ctrl+Mod1+Shift+h gaps horizontal current minus 5
bindsym Ctrl+Mod1+Shift+j gaps vertical current minus 5
bindsym Ctrl+Mod1+Shift+k gaps vertical current plus 5
bindsym Ctrl+Mod1+Shift+l gaps horizontal current plus 5
bindsym Ctrl+Mod1+Shift+m gaps inner current minus 5
bindsym Ctrl+Mod1+Shift+p gaps inner current plus 5
bindsym Ctrl+Mod1+Shift+o gaps outer current set $default_outer_gap
bindsym Ctrl+Mod1+Shift+i gaps inner current set $default_inner_gap

# i3-gap (modify in mode, works for both current workspace and global workspace)
# -- https://github.com/Airblader/i3/wiki/Example-Configuration
# Note: horiz, verti, top, right, bottom, left are all part of outer gaps
set $mode_gaps Gaps: [o]uter [i]nner [h]orizontal [v]ertical [t]op [r]ight [b]ottom [l]eft [s]et_default_inner_gap [S]et_default_outer_gap [G]aps_option
bindsym Mod4+Shift+g mode "$mode_gaps"
mode "$mode_gaps" {
    bindsym o       mode "$mode_gaps_outer"
    bindsym i       mode "$mode_gaps_inner"
    bindsym h       mode "$mode_gaps_horiz"
    bindsym v       mode "$mode_gaps_verti"
    bindsym t       mode "$mode_gaps_top"
    bindsym r       mode "$mode_gaps_right"
    bindsym b       mode "$mode_gaps_bottom"
    bindsym l       mode "$mode_gaps_left"
    bindsym s       mode "$mode_set_inner_gap"
    bindsym Shift+s mode "$mode_set_outer_gap"
    bindsym Shift+g mode "$mode_set_gap_option"
    # Exit mode: "Enter", "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Return           mode "default"
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set outer gaps (within gap mode)
set $mode_gaps_outer Outer Gaps: [+/-/0/d] (local), Shift+[+/-/0/d] (global)
mode "$mode_gaps_outer" {
    # Local
    bindsym plus  gaps outer current plus 5
    bindsym minus gaps outer current minus 5
    bindsym 0     gaps outer current set 0
    bindsym d     gaps outer current set $default_outer_gap
    # Global
    bindsym Shift+plus  gaps outer all plus 5
    bindsym Shift+minus gaps outer all minus 5
    bindsym Shift+0     gaps outer all set 0
    bindsym Shift+d     gaps outer all set $default_outer_gap
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set inner gaps (within gap mode)
set $mode_gaps_inner Inner Gaps: [+/-/0/d] (local), Shift+[+/-/0/d] (global)
mode "$mode_gaps_inner" {
    # Local
    bindsym plus  gaps inner current plus 5
    bindsym minus gaps inner current minus 5
    bindsym 0     gaps inner current set 0
    bindsym d     gaps inner current set $default_inner_gap
    # Global
    bindsym Shift+plus  gaps inner all plus 5
    bindsym Shift+minus gaps inner all minus 5
    bindsym Shift+0     gaps inner all set 0
    bindsym Shift+d     gaps inner all set $default_inner_gap
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}


# Set horizontal (both left and right) gaps (within gap mode)
set $mode_gaps_horiz Horizontal (left and right) Gaps: [+/-/0] (local), Shift+[+/-/0] (global), (Shift)+[1]16:9 (global/local)
mode "$mode_gaps_horiz" {
    # Local
    bindsym plus  gaps horizontal current plus 5
    bindsym minus gaps horizontal current minus 5
    bindsym 0     gaps horizontal current set 0
    # Global
    bindsym Shift+plus  gaps horizontal all plus 5
    bindsym Shift+minus gaps horizontal all minus 5
    bindsym Shift+0     gaps horizontal all set 0
    # 16:9 for single window in single monitor
    bindsym 1       gaps horizontal current set 32
    bindsym Shift+1 gaps horizontal all set 32
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set vertical (both top and bottom) gaps (within gap mode)
set $mode_gaps_verti Vertical (top and bottom) Gaps: [+/-/0] (local), Shift+[+/-/0] (global)
mode "$mode_gaps_verti" {
    # Local
    bindsym plus  gaps vertical current plus 5
    bindsym minus gaps vertical current minus 5
    bindsym 0     gaps vertical current set 0
    # Global
    bindsym Shift+plus  gaps vertical all plus 5
    bindsym Shift+minus gaps vertical all minus 5
    bindsym Shift+0     gaps vertical all set 0
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set top gaps (within gap mode)
set $mode_gaps_top Top Gaps: [+/-/0] (local), Shift+[+/-/0] (global)
mode "$mode_gaps_top" {
    # Local
    bindsym plus  gaps top current plus 5
    bindsym minus gaps top current minus 5
    bindsym 0     gaps top current set 0
    # Global
    bindsym Shift+plus  gaps top all plus 5
    bindsym Shift+minus gaps top all minus 5
    bindsym Shift+0     gaps top all set 0
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set right gaps (within gap mode)
set $mode_gaps_right Right Gaps: [+/-/0] (local), Shift+[+/-/0] (global)
mode "$mode_gaps_right" {
    # Local
    bindsym plus  gaps right current plus 5
    bindsym minus gaps right current minus 5
    bindsym 0     gaps right current set 0
    # Global
    bindsym Shift+plus  gaps right all plus 5
    bindsym Shift+minus gaps right all minus 5
    bindsym Shift+0     gaps right all set 0
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set bottom gaps (within gap mode)
set $mode_gaps_bottom Bottom Gaps: [+/-/0] (local), Shift+[+/-/0] (global)
mode "$mode_gaps_bottom" {
    # Local
    bindsym plus  gaps bottom current plus 5
    bindsym minus gaps bottom current minus 5
    bindsym 0     gaps bottom current set 0
    # Global
    bindsym Shift+plus  gaps bottom all plus 5
    bindsym Shift+minus gaps bottom all minus 5
    bindsym Shift+0     gaps bottom all set 0
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set left gaps (within gap mode)
set $mode_gaps_left Left Gaps: [+/-/0] (local), Shift+[+/-/0] (global)
mode "$mode_gaps_left" {
    # Local
    bindsym plus  gaps left current plus 5
    bindsym minus gaps left current minus 5
    bindsym 0     gaps left current set 0
    # Global
    bindsym Shift+plus  gaps left all plus 5
    bindsym Shift+minus gaps left all minus 5
    bindsym Shift+0     gaps left all set 0
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set outer gap (left, top, bottom and right) (within gap mode)
set $mode_set_outer_gap Set outer gap width pixel value (add [Shift] prefix for negative value): [1] 5pix [2] 10pix [3] 15pix [4] 20pix [5] 25pix [6] 30pix [7] 35pix [8] 40pix [9] 45pix [0] 0pix
mode "$mode_set_outer_gap" {
    bindsym 1 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 5; mode "default"
    bindsym 2 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 10; mode "default"
    bindsym 3 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 15; mode "default"
    bindsym 4 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 20; mode "default"
    bindsym 5 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 25; mode "default"
    bindsym 6 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 30; mode "default"
    bindsym 7 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 35; mode "default"
    bindsym 8 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 40; mode "default"
    bindsym 9 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 45; mode "default"
    # Disable outer gap
    bindsym 0 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap 0; mode "default"
    # Negative gap size (shrink inside)
    bindsym Shift+1 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -5; mode "default"
    bindsym Shift+2 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -10; mode "default"
    bindsym Shift+3 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -15; mode "default"
    bindsym Shift+4 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -20; mode "default"
    bindsym Shift+5 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -25; mode "default"
    bindsym Shift+6 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -30; mode "default"
    bindsym Shift+7 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -35; mode "default"
    bindsym Shift+8 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -40; mode "default"
    bindsym Shift+9 exec $I3_SCRIPT/i3_default_valuechanger.sh outer_gap -45; mode "default"
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set inner gap (left, top, bottom and right) (within gap mode)
set $mode_set_inner_gap Set inner gap width pixel value (add [Shift] prefix for negative value): [1] 5pix [2] 10pix [3] 15pix [4] 20pix [5] 25pix [6] 30pix [7] 35pix [8] 40pix [9] 45pix [0] 0pix
mode "$mode_set_inner_gap" {
    bindsym 1 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 5; mode "default"
    bindsym 2 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 10; mode "default"
    bindsym 3 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 15; mode "default"
    bindsym 4 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 20; mode "default"
    bindsym 5 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 25; mode "default"
    bindsym 6 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 30; mode "default"
    bindsym 7 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 35; mode "default"
    bindsym 8 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 40; mode "default"
    bindsym 9 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 45; mode "default"
    # Disable inner gap
    bindsym 0 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap 0; mode "default"
    # Negative gap size (shrink inside)
    bindsym Shift+1 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -5; mode "default"
    bindsym Shift+2 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -10; mode "default"
    bindsym Shift+3 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -15; mode "default"
    bindsym Shift+4 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -20; mode "default"
    bindsym Shift+5 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -25; mode "default"
    bindsym Shift+6 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -30; mode "default"
    bindsym Shift+7 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -35; mode "default"
    bindsym Shift+8 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -40; mode "default"
    bindsym Shift+9 exec $I3_SCRIPT/i3_default_valuechanger.sh inner_gap -45; mode "default"
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}

# Set smart gap option (within gap mode)
set $mode_set_gap_option Gap option: [1]smart_gaps_on [2]smart_gaps_inverse_outer [3]smart_gaps_off
mode "$mode_set_gap_option" {
    bindsym 1 exec $I3_SCRIPT/i3_gap_operator.sh smart_gaps_on; mode "default"
    bindsym 2 exec $I3_SCRIPT/i3_gap_operator.sh smart_gaps_inverse_outer; mode "default"
    bindsym 3 exec $I3_SCRIPT/i3_gap_operator.sh smart_gaps_off; mode "default"
    # Back to gap mode: "Enter"
    bindsym Return mode "$mode_gaps"
    # Exit mode: "Escape" or "Ctrl"+"[" (vim-like Escape)
    bindsym Escape           mode "default"
    bindsym Ctrl+bracketleft mode "default"
}
